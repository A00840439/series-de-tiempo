# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pUpc2sfRDl3TnXqs2k3JEYMRVFesM5yi
"""

import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import adfuller, acf
import seaborn as sns

# Set random seed for reproducibility
np.random.seed(42)

# Fetch stock data for TSLA, AAPL, NVDA around Nov 29, 2019
tickers = ['TSLA', 'AAPL', 'NVDA']
start_date = '2019-01-01'
end_date = '2019-12-31'
stock_data = yf.download(tickers, start=start_date, end=end_date)  # auto_adjust=True by default

# Function to simulate random walk
def simulate_random_walk(initial_price, n_steps, volatility=0.01):
    returns = np.random.normal(loc=0, scale=volatility, size=n_steps)
    price_path = initial_price * np.exp(np.cumsum(returns))
    return price_path

# Simulate random walk for each stock using 'Close' (adjusted by default)
n_steps = len(stock_data)
random_walks = {}
for ticker in tickers:
    initial_price = stock_data['Close'][ticker].iloc[0]  # Use 'Close' instead of 'Adj Close'
    random_walks[ticker] = simulate_random_walk(initial_price, n_steps)

# Plot stock prices and random walks
plt.figure(figsize=(12, 8))
for ticker in tickers:
    plt.plot(stock_data.index, stock_data['Close'][ticker], label=f'{ticker} Actual')
    plt.plot(stock_data.index, random_walks[ticker], '--', label=f'{ticker} Random Walk')
plt.title('Stock Prices vs. Random Walk (2019)')
plt.xlabel('Date')
plt.ylabel('Adjusted Close Price ($)')
plt.legend()
plt.grid(True)
plt.show()

# Unit root test (Augmented Dickey-Fuller)
def unit_root_test(series, ticker):
    result = adfuller(series.dropna())
    print(f'\nUnit Root Test (ADF) for {ticker}:')
    print(f'ADF Statistic: {result[0]:.4f}')
    print(f'p-value: {result[1]:.4f}')
    print('Critical Values:', {k: v for k, v in result[4].items()})
    if result[1] < 0.05:
        print(f'Result: Stationary (reject null hypothesis)')
    else:
        print(f'Result: Non-stationary (fail to reject null hypothesis)')

# Run unit root test for each stock using 'Close'
for ticker in tickers:
    unit_root_test(stock_data['Close'][ticker], ticker)

# Correlogram (Autocorrelation Function)
def plot_correlogram(series, ticker, lags=30):
    acf_values = acf(series.dropna(), nlags=lags)
    plt.figure(figsize=(10, 4))
    plt.stem(range(lags+1), acf_values)
    plt.title(f'Correlogram (ACF) for {ticker} (2019)')
    plt.xlabel('Lag')
    plt.ylabel('Autocorrelation')
    plt.grid(True)
    plt.show()

# Plot correlogram for each stock using 'Close'
for ticker in tickers:
    plot_correlogram(stock_data['Close'][ticker], ticker)